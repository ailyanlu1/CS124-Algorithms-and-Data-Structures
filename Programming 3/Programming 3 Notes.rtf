{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1. 
\b Dynamic Programming: 
\b0 \
\
2. 
\b KK in 
\i O(nlogn)
\i0 : \

\b0 Use a max binary heap to store the elements and their differences. Until there is at most 1 nonzero element in the heap, pop two elements off (because this will be a max heap these will be the two largest elements), take their difference, and insert the difference (if it's nonzero) back into the heap.  The popping (and restructuring of the heap takes at O(logn) steps) and then because we insert at most one element back into the heap each time, within n steps, this algorithm will terminate.  So it runs in O(nlogn) time. \
\
3.  }